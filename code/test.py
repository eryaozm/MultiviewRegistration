
source, target = load_point_clouds('source.ply', 'target.ply')
visualize_point_clouds(source, target)
source_points, source_down = preprocess_point_cloud(source)
target_points, target_down = preprocess_point_cloud(target)
dataset = PointCloudDataset(source_points, target_points, num_samples=1000)
dataloader = DataLoader(dataset, batch_size=32, shuffle=True)
model = AttentionBasedPointCloudRegistration(feature_dim=512, k_correspondences=256)
trained_model = train_attention_registration_model(model, dataloader, num_epochs=50)
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
with torch.no_grad():
    source_tensor = torch.FloatTensor(source_points).unsqueeze(0).to(device)
    target_tensor = torch.FloatTensor(target_points).unsqueeze(0).to(device)
    pred_transform, selected_source, selected_target, cross_attn = trained_model(source_tensor, target_tensor)
    source_transformed_tensor = trained_model.apply_transform(source_tensor, pred_transform)
    trained_model.visualize_attention(source_tensor, target_tensor, cross_attn, k=20)
    pred_transform = pred_transform.squeeze(0).cpu().numpy()
    source_transformed = source_transformed_tensor.squeeze(0).cpu().numpy()
transformed_pcd = o3d.geometry.PointCloud()
transformed_pcd.points = o3d.utility.Vector3dVector(source_transformed)

visualize_point_clouds(source_down, target_down, transformed_pcd)
evaluation = evaluate_registration(source_points, target_points, source_transformed)
torch.save(trained_model.state_dict(), 'attention_point_cloud_registration_model.pth')